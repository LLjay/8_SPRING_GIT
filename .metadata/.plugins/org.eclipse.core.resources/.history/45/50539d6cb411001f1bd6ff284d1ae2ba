package com.kh.spring.board.controller;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;

import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.google.gson.Gson;
import com.kh.spring.board.model.vo.Board;
import com.kh.spring.board.model.vo.Reply;
import com.kh.spring.board.service.BoardService;
import com.kh.spring.common.model.vo.PageInfo;
import com.kh.spring.common.template.Pagination;

@Controller
public class BoardController {

	@Autowired
	private BoardService boardService;
	
	private static final Logger logger = LoggerFactory.getLogger(BoardController.class);
	
	@RequestMapping("list.bo")
	public String selectList(@RequestParam(value="cpage", defaultValue="1") int currentPage, Model model) {
		int boardCount = boardService.selectListCount();
		logger.info("list.bo 실행");
		// system printin은 할 때마다 인풋스트림을 열어서 쓰는 것이기 때문에 무거움
		
		// 페이지에 해당하는 게시글을 실제로 가져오기 위해 페이지 인포를 넘겨주는 것
		PageInfo pi = Pagination.getPageInfo(boardCount, currentPage, 10, 5);
		ArrayList<Board> list = boardService.selectList(pi);
		
		model.addAttribute("list", list);
		model.addAttribute("pi", pi);
		return "board/boardListView";
	}
	
	// get, post, foot? detail? 등의 요청을 한 번에 다 받아줌, 근데 나눠서 받는 설정이 가능함
	// get은 보통 가져올 때, post는 보통 데이터를 보낼 때
//	@RequestMapping(value = "detail.bo", method = RequestMethod.POST)
	@RequestMapping("detail.bo")
	public String selectBoard(int bno, Model model) {
		int result = boardService.increaseCount(bno); // 증가 시키는 것만 왜 따로 뺴지?
		// 제어문이 두 개라 트랜잭션이 둘 다 필요한 때 묶어주기, 아니면 서로 분리해서 메소드 만들기
		if(result > 0) {
			Board b = boardService.selectBoard(bno);
			model.addAttribute("b", b);
			
			return "board/boardDetailView";
		} else {
			model.addAttribute("errorMsg", "게시글 조회 실패");
			return "common/errorPage";
		}
	}
	
	@ResponseBody // ?
	@RequestMapping(value = "rlist.bo", produces="application/json; charset-UTF-8")
	// json 형식에 관한 설정은 produces 에 넣어줌
	public String ajaxSelectReplyList(int bno) {
		ArrayList<Reply> list = boardService.selectReplyList(bno);
		
		return new Gson().toJson(list);
	}
	
	@RequestMapping("enrollForm.bo")
	public String enrollForm() {
		return "board/boardEnrollForm";
	}
	
	@RequestMapping("insert.bo")
	public String insertBoard(Board b, MultipartFile upfile, HttpSession session, Model model) {
		// 원래는 cos라는 라이브러리 등록 받아서 이미지 변환 해줬음
		System.out.println(b);
		System.out.println(upfile);
		
		// 전달된 파일이 있을 경우 -> 파일 이름 변경 -> 서버에 저장 -> 원본명, 서버 업로드 된 경로를 b 객체에 담기
		if(!upfile.getOriginalFilename().equals("")) {
			String changeName = saveFile(upfile, session);
			
			b.setOriginName(upfile.getOriginalFilename());
			b.setChangeName("resources/uploadFiles/" + changeName);
		}
//		경로와 changename을 한 번에 저장하는 경우가 있음, 유지보수는 힘들지만 파일 경로 찾긴 쉬움
	
		int result = boardService.insertBoard(b);
		if(result > 0) { // 성공 -> list 페이지로 이동
			session.setAttribute("alertMsg", "게시글 작성 성공");
			return "redirect:list.bo";
		} else { // 실패 -> 에러 페이지
			model.addAttribute("errorMsg", "게시글 작성 실패");
			return "common/errorPage";
		}
	}
	
	// 실제 넘어온 파일의 이름을 변경해서 서버에 저장하는 메소드
	public String saveFile(MultipartFile upfile, HttpSession session) {
		// 파일명 수정 후 서버에 업로드("imgFile.jpg" -> 2024...)
		String originName = upfile.getOriginalFilename();
		
		// 날짜
		String currentTime = new SimpleDateFormat("yyyyMMddHHmmss").format(new Date());
		
		// 5자리 랜덤값
		int ranNum = (int)(Math.random() * 90000 ) + 10000;
		
		// 확장자
		String ext = originName.substring(originName.lastIndexOf("."));
		
		// 수정된 첨부 파일 명
		String changeName = currentTime + ranNum + ext;
		
		// 첨부 파일을 저장할 폴더의 물리적 경로
		String savePath = session.getServletContext().getRealPath("/resources/uploadFiles/");
	
		try {
			upfile.transferTo(new File(savePath + changeName));
		} catch (IllegalStateException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
//		경로 또는 url, 해당 파일 객체를 저장할 때 사용
		
		return changeName;
	}
	
	@RequestMapping("updateForm.bo") // @ModelAttribute
	public String updateForm(int bno, Model model) {
		
		model.addAttribute("b", boardService.selectBoard(bno));
		return "board/boardUpdateForm";
	}
	
	@RequestMapping("update.bo")
	public String updateBoard(@ModelAttribute Board b, MultipartFile reupfile, HttpSession session, Model model) {
		// 항상  ModelAttribute가 생략 되어 있음
		
		// 새로운 첨부 파일이 넘어온 경우
		if (reupfile.getOriginalFilename().equals("")) {
//			 오리진 네임, 체인지 네임 없을 것
			// 기존의 첨부 파일 있음 -> 기존 파일 삭제
			if (b.getOriginName() != null) {
				new File(session.getServletContext().getRealPath(b.getChangeName())).delete(); 
				// file 객체가 알아서 물리적 경로의 파일을 찾아서 지워줄 것 -> changeName 안에 컨텍스트 루트까지 이미 다 저장했음
			}
			
			// 새로 넘어온 첨부 파일을 서버에 업로드
			String changeName = saveFile(reupfile, session);
			
			b.setOriginName(reupfile.getOriginalFilename());
			b.setChangeName("resources/uploadFiles/" + changeName);
		}
		
		/*
		 * b에 boardTitle, boardContent
		 * 
		 * 1. 새로운 첨부파일 X, 기존 첨부파일 X
		 * 		-> originName : null, changeName : null
		 * 2. 새로운 첨부파일 X, 기존 첨부파일 O
		 * 		-> originName : 기존 첨부파일 이름, changeName : 기존 첨부파일 경로
		 * 3. 새로운 첨부파일 O, 기존 첨부파일 O
		 * 		-> originName : 새로운 첨부파일 이름, changeName : 새로운 첨부파일 경로
		 * 4. 새로운 첨부파일 O, 기존 첨부파일 X
		 * 		-> originName : 새로운 첨부파일 이름, changeName : 새로운 첨부파일 경로
		 */
		
		int result = boardService.updateBoard(b);
		
		if(result > 0) {
			session.setAttribute("alertMsg", "게시글 수정 성공");
			return "redirect:detail.bo?bno=" + b.getBoardNo();
		} else {
			model.addAttribute("errorMsg", "게시글 수정 실패");
			return "common/errorPage";
		}
		
	}
	
	// jsp로 응답 하겠다는 설정이 있기 때문에 return 값을 따로 보내주겠다는 어노테이션 설정
	@ResponseBody
	@RequestMapping("rinsert.bo")
	public String ajaxInsertReply(Reply r) {
		// 성공 했을 때 success, 실패 했을 때 fail
		return boardService.insertReply(r) > 0 ? "success" : "fail";
		
	}
	
	@ResponseBody
	@RequestMapping(value="topList.bo", produces="application/json; charset=UTF-8")
	public String ajaxTopBoardList() {
		return new Gson().toJson(boardService.selectTopBoardList());
	}

}