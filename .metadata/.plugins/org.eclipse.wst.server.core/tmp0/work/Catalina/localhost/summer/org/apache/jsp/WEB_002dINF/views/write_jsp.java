/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.99
 * Generated at: 2024-05-10 03:25:57 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class write_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("\r\n");
      out.write("<!-- include libraries(jQuery, bootstrap) -->\r\n");
      out.write("<link href=\"https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.5.1.min.js\"></script>\r\n");
      out.write("<script src=\"https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js\"></script>\r\n");
      out.write("<!-- 부트스트랩 버전마다 include 링크가 따로 있으므로 맞는 걸 가져와서 사용하면 됨 -->\r\n");
      out.write("<!-- include summernote css/js -->\r\n");
      out.write("<link href=\"https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote.min.css\" rel=\"stylesheet\">\r\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote.min.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<form method=\"post\">\r\n");
      out.write("	  <textarea id=\"summernote\" name=\"editordata\"></textarea>\r\n");
      out.write("	</form>\r\n");
      out.write("	\r\n");
      out.write("	<script>\r\n");
      out.write("		$(document).ready(function() {\r\n");
      out.write("		  $('#summernote').summernote({\r\n");
      out.write("			  placeholder: \"게시글을 작성해주세요.\",\r\n");
      out.write("			  height: 600,\r\n");
      out.write("			  maxHeight: 1000,\r\n");
      out.write("			  width: 800,\r\n");
      out.write("			  toolbar: [\r\n");
      out.write("				    // [groupName, [list of button]]\r\n");
      out.write("				    ['style', ['bold', 'italic', 'underline', 'clear']],\r\n");
      out.write("				    ['font', ['strikethrough', 'superscript', 'subscript']],\r\n");
      out.write("				    ['fontsize', ['fontsize']],\r\n");
      out.write("				    ['color', ['color']],\r\n");
      out.write("				    ['para', ['ul', 'ol', 'paragraph']],\r\n");
      out.write("				    ['height', ['height']],\r\n");
      out.write("				    ['insert', []]\r\n");
      out.write("				    ],\r\n");
      out.write("				      callbacks: {\r\n");
      out.write("				        // onImageUpload: function(files) {\r\n");
      out.write("				        //   // upload image to server and create imgNode...\r\n");
      out.write("				        // //   $summernote.summernote('insertNode', imgNode);\r\n");
      out.write("						// fileUpload(files);\r\n");
      out.write("				        //   // ajax 통신을 통한 이미지 업로드\r\n");
      out.write("				        // } // imgNode에 이미지 url이 들어감\r\n");
      out.write("						// $summernote.summernote('insertNode', imgNode)\r\n");
      out.write("						onImageUpload: fileUpload\r\n");
      out.write("				      }\r\n");
      out.write("			});\r\n");
      out.write("		  });\r\n");
      out.write("		// 이걸 커스터마이징 한 사람들 것 참고 하거나 get start 보기\r\n");
      out.write("		// callback\r\n");
      out.write("\r\n");
      out.write("		// summernote에 이미지 업로드가 발생 했을 때 동작하는 함수\r\n");
      out.write("		function fileUpload(fileList){\r\n");
      out.write("			// summernote는 이미지를 추가하면 해당 이미지 파일을 전달해줌\r\n");
      out.write("			// callback 함수를 작성하지 않을 경우 자동으로 이미지를 string으로 변환해서 보여주지만\r\n");
      out.write("			// customCallback을 작성할 경우 해당 이미지의 경로를 직접 줘야 함\r\n");
      out.write("			\r\n");
      out.write("			// 파일 업로드를 할 때는 form 태그에서 encType을 multipart/form-data 형식으로\r\n");
      out.write("			// 요청하는 것처럼 자바 스크립트 객체에 FormData 객체를 이용해서 ajax 요청 해주기\r\n");
      out.write("			const fd = new FormData(); // 이걸 사용하려면 FormData 라는 객체를 이용해야 함\r\n");
      out.write("			// multipartformdata와 같은 자바 스크립트의 객체가 FormData\r\n");
      out.write("			fd.append(\"fileList\", fileList[0]);\r\n");
      out.write("\r\n");
      out.write("			insertFileApi(fd);\r\n");
      out.write("\r\n");
      out.write("			$summernote.summernote('insertNode', imgNode);\r\n");
      out.write("			\r\n");
      out.write("			// 서버에 사진을 먼저 저장해줄 것\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("		function insertFileApi(data, callback){\r\n");
      out.write("			$.ajax({\r\n");
      out.write("				url: \"upload\",\r\n");
      out.write("				type: \"POST\",\r\n");
      out.write("				data: data,\r\n");
      out.write("				processData: false, // 기본이 true, true일 때는 전송하는 data를 string으로 변환해서 요청\r\n");
      out.write("				contentType: false, // application/x-www-form-urlencoded; charset=UTF-8; (디폴트) -> multipart/form-data로 보내기 위해 false로 지정\r\n");
      out.write("				// 전송하는 데이터의 타입\r\n");
      out.write("				dataType: \"json\", // 서버로부터 json으로 데이터를 받겠다\r\n");
      out.write("				success: function(changeNameList){\r\n");
      out.write("					console.log(changeNameList)\r\n");
      out.write("				},\r\n");
      out.write("				error: function(){\r\n");
      out.write("					console.log(\"파일 업로드 api 요청 실패\")\r\n");
      out.write("				}\r\n");
      out.write("			})\r\n");
      out.write("		}\r\n");
      out.write("	</script>\r\n");
      out.write("	\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
